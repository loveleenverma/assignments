/*A Barua number is a number which consists of only zeroes and ones and has only one 1.
Barua number will start with 1. Given numbers, find out the multiplication of the numbers.
Note: The input may contain one decimal number and all other Barua numbers. (Assume
that each number is very large and total number of values give is also very large)
Input 1: 100 10 12 1000
Output 1: 12000000
Input 2: 100 121 1000000000000000
Output 2: 12100000000000000000
Input 3: 10 100 1000
Output 3: 1000000*/


#include<iostream>
using namespace std;
int main()
{
	int n;
	cout<<"enter the number of values you want:"<<endl;
	cin>>n;
	int *p;
	p=new int[n];

	int i;
	int a;
	int flag=0;
	for(i=0;i<n;i++)
	{
		label:cout<<"enter the value:"<<endl;
	    cin>>a;
	    if(a%10!=0)
	    {
	    	flag=flag+1;
	    	
		}
		if(a%10==0||flag<=1)
		{
			p[i]=a;
		}
		else
		{
			cout<<"you can enter only one decimal value:"<<endl;
			goto label;
		}
	    
		
	}
	
	cout<<"the values you entered are:"<<endl;
	for(i=0;i<n;i++)
	{
		cout<<p[i]<<" ";
	}
	cout<<endl;
	int ans=p[0];
	for(i=1;i<n;i++)
	{
	  ans=ans*p[i];	
	}
	cout<<"The answer is:"<<ans<<endl;
	
}

/*Implement push, pop and find the minimum element in a stack in O(1) time complexity.*/
#include<bits/stdc++.h> 
using namespace std;
stack<int> st;
stack<int> minSt;
void push(int x) {
    st.push(x);
    if (minSt.empty() || minSt.top() > x) {
        minSt.push(x);
    } else {
        minSt.push(minSt.top());
    }
}
void pop() {
    st.pop();
    minSt.pop();
}

int getMin() {
    return minSt.top();
}
int main() {
    push(-2);
    push(0);
    cout<<getMin()<<endl;
    push(-3);
    pop();
    cout<<getMin()<<endl;
    
    return 0;
}
